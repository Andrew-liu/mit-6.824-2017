package mapreduce

import (
	"hash/fnv"
	"os"
	"log"
	"encoding/json"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	/*
	1. 打开输入文件
	2. 输入到Map中
	3. 生成nReduce个中间文件
 */
	file, err := os.Open(inFile)
	debug("DEBUG: Map inFile: %s, MapTaskNumber: %d, nReduce: %d, jobName: %s\n", inFile, mapTaskNumber, nReduce, jobName)
	if err != nil {
		log.Fatal("Open file error: ", err)
	}
	fileInfo, err := file.Stat()
	if err != nil {
		log.Fatal("Get file info error: ", err)
	}
	fileSize := fileInfo.Size()
	buf := make([]byte, fileSize)
	_, err = file.Read(buf)
	debug("DEBUG: Read from inFile: %v\n", inFile)
	if err != nil {
		log.Fatal("Read error: ", err)
	}
	res := mapF(inFile, string(buf)) // res []KeyValue 键值对数组
	rSize := len(res)
	debug("DEBUG: Map result size: %v\n", rSize)
	file.Close()
	for i := 0; i < nReduce; i++ {  // 生成nReduce个中间文件
		fileName := reduceName(jobName, mapTaskNumber, i)
		debug("Debug: Map Middle filename: %s\n", fileName)
		file, err := os.Create(fileName)  // 创建新中间文件
		if err != nil {
			log.Fatal("Create mid file: ", err)
		}
		enc := json.NewEncoder(file)
		for r := 0; r < rSize; r++ {
			kv := res[r]
			// 将对应key的值通过hash存储在对应的nReduce个文件中(也就是找到key应该映射到那个文件中)
			if ihash(kv.Key) % nReduce == i {
				//fmt.Printf("save data: %s ", kv)
				err := enc.Encode(&kv)
				if err != nil {
					log.Fatal("Encode error: ", kv)
				}
			}
		}
		file.Close()
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
